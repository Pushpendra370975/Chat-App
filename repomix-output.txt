This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-15T07:59:11.891Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.eslintrc.cjs
.gitignore
index.html
package.json
src/App.jsx
src/components/chat/chat.css
src/components/chat/Chat.jsx
src/components/details/detail.css
src/components/details/Detail.jsx
src/components/list/chatList/addUser/addUser.css
src/components/list/chatList/addUser/AddUser.jsx
src/components/list/chatList/chatList.css
src/components/list/chatList/ChatList.jsx
src/components/list/list.css
src/components/list/List.jsx
src/components/list/userInfo/userInfo.css
src/components/list/userInfo/UserInfo.jsx
src/components/login/login.css
src/components/login/Login.jsx
src/components/notification/Notification.jsx
src/debug/GenerateTestUserSig-es.js
src/debug/lib-generate-test-usersig-es.min.js
src/index.css
src/lib/chatStore.js
src/lib/firebase.js
src/lib/upload.js
src/lib/userStore.js
src/main.jsx
vite.config.js

================================================================
Repository Files
================================================================

================
File: .eslintrc.cjs
================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    "react/prop-types": "off",
    "no-unused-vars": "warn",
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "chat-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tencentcloud/call-uikit-react": "^3.2.9",
    "emoji-picker-react": "^4.9.3",
    "firebase": "^10.12.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-toastify": "^10.0.5",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@vitejs/plugin-react": "^4.2.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "vite": "^5.2.0"
  }
}

================
File: src/App.jsx
================
import Chat from './components/chat/Chat'
import List from './components/list/List'
import Detail from './components/details/Detail'
import Login from './components/login/Login'
import Notification from './components/notification/Notification'
import { useEffect } from 'react'
import { auth } from './lib/firebase';
import { onAuthStateChanged } from 'firebase/auth'
import { useUserStore } from './lib/userStore'
import { useChatStore } from './lib/chatStore'

const App = () => {
  const {chatId} = useChatStore();
  const {currentUser, isLoading, fetchUserInfo} = useUserStore();
  
  useEffect(() => {
    console.log("Setting up auth listener");
    const unSub = onAuthStateChanged(auth, (user) => {
      console.log("Auth state changed:", user?.uid);
      if (user) {
        fetchUserInfo(user.uid);
      } else {
        useUserStore.getState().fetchUserInfo(null);
      }
    });
    return () => unSub();
  }, []);
  
  console.log("App rendering:", { 
    hasCurrentUser: !!currentUser, 
    isLoading,
    currentUserData: currentUser 
  });

  if (isLoading) {
    console.log("Showing loading state");
    return <div className='loading'>Loading....</div>;
  }

  console.log("Rendering main UI. Current user exists:", !!currentUser);
  
  return (
    <div className='container'>
      {currentUser ? (
        <>
          <List/>
          {chatId && <Chat/>}
          {chatId && <Detail/>}
        </>
      ) : (
        <Login/>
      )}
      <Notification/>
    </div>
  )
}

export default App

================
File: src/components/chat/chat.css
================
.chat{
    flex:2;
    border-left: 1px solid #dddddd35;
    border-right: 1px solid #dddddd35;
    height:100%;
    display: flex;
    flex-direction: column;
    
    .call{
        background-color: #ced6ef;
    }
    .top{
        padding: 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-bottom: 1px solid #dddddd35;

        .user{
            display: flex;
            align-items: center;
            gap:20px;

            img{
                width: 60px;
                height:60px;
                border-radius: 50%;
                object-fit: cover;
            }
            .texts{
                display: flex;
                flex-direction: column;
                gap: 5px;
            }
            span{
                font-size: 20px;
                font-weight: 500;
            }
            p{
                font-size: 14px;
                font-weight:300;
                color: #a5a5a5;
            }
        }
        .icons{
            display:flex;
            gap:20px;

            img{
                width: 20px;
                height: 20px;
                cursor: pointer;
            }
        }
    }
    .center{
         padding:20px;
         flex:1;
         overflow: scroll;
         display: flex;
         flex-direction: column;
         gap:20px;

         .message{
            max-width: 70%;
            display:flex;
            gap: 20px;

            &.own{
                align-self: flex-end;

                .texts{
                    p{
                        background-color: rgb(91, 91, 236);
                    }
                }
            }
            img{
                width: 30px;
                height:30px;
                border-radius: 50%;
                object-fit:cover;

            }
            .texts{
                flex:1;
                display: flex;
                flex-direction: column;
                gap: 5px;
                
                img{
                    width:100%;
                    height:300px;
                    border-radius: 10px;
                    object-fit: cover;
                }
                p{
                    padding: 20px;
                    background-color: rgba(17,25,40,0.3);
                    border-radius:10px;
                }
                span{
                    font-size: 13px;
                }
            }
         }
    }
    .bottom{
        padding: 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-top: 1px solid #dddddd35;
        gap:20px;

        .icons{
            display: flex;
            gap:20px;
        }
        img{
            width: 20px;
            height: 20px;
            cursor: pointer;
        }
        

        input{
            flex:1;
            flex-direction: column ;
            background-color: rgba(17,25,40,0.5);
            border: none;
            outline: none;
            color: white;
            padding: 20px;
            border-radius: 10px;
            font-size: 16px;

            &:disabled{
                cursor: not-allowed;
                background-color: rgba(17, 25, 40, 0.239);
            }
        }
        
        .emoji{
            position:relative;

            .picker{
                position: absolute;
                bottom: 50px;
                left:0;
            }
        }
        .sendButton{
            background-color: #2655ee;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;

            &:disabled{
                cursor: not-allowed;
                background-color: #6787ef;
            }
        }
    }
    .block-message {
        text-align: center;
        color: #ff4444;
        padding: 10px;
        background: rgba(255,0,0,0.1);
        margin: 10px 0;
        border-radius: 4px;
      }
      
      .chat .bottom input:disabled,
      .chat .bottom button:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        background-color: #f0f0f0;
    }
}

================
File: src/components/chat/Chat.jsx
================
import React, { useEffect, useRef, useState } from "react";
import "./chat.css";
import EmojiPicker from "emoji-picker-react";
import {
  arrayUnion,
  doc,
  onSnapshot,
  updateDoc,
  getDoc,
} from "firebase/firestore";
import { db } from "../../lib/firebase";
import { useChatStore } from "../../lib/chatStore";
import { useUserStore } from "../../lib/userStore";
import upload from "../../lib/upload";
import {
  TUICallKit,
  TUICallKitServer,
  TUICallType,
} from "@tencentcloud/call-uikit-react";
import * as GenerateTestUserSig from "../../debug/GenerateTestUserSig-es";
import { Timestamp } from "firebase/firestore";

const Chat = () => {
  const [chat, setChat] = useState();
  const [open, setopen] = useState(false);
  const [text, setText] = useState("");
  const { chatId, user, isCurrentUserBlocked, isReceiverBlocked } =
    useChatStore();
  const { currentUser } = useUserStore();
  const [clearedAt, setClearedAt] = useState(0);
  const [img, setImg] = useState({
    file: null,
    url: "",
  });

  const endRef = useRef(null);

  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chat]);

  useEffect(() => {
    const unSub = onSnapshot(doc(db, "chats", chatId), (res) => {
      setChat(res.data());
      setCallerUserID(user.id);
      setCalleeUserID(currentUser.id);
    });
    return () => {
      unSub();
    };
  }, [chatId]);

  // Fetch cleared timestamp when chat changes
  useEffect(() => {
    const fetchClearedTimestamp = async () => {
      if (currentUser?.id && chatId) {
        const userChatsRef = doc(db, "userchats", currentUser.id);
        const userChatsDoc = await getDoc(userChatsRef);

        if (userChatsDoc.exists()) {
          const userChatsData = userChatsDoc.data();
          const currentChat = userChatsData.chats.find(
            (c) => c.chatId === chatId
          );
          setClearedAt(currentChat?.clearedAt || 0);
        }
      }
    };

    fetchClearedTimestamp();
  }, [chatId, currentUser?.id]);

  const SDKAppID = 20014399;
  const SDKSecretKey =
    "d0168e98621b1e26651934dfa73756a18171e54a58ca7c709058847434411425";

  const [callerUserID, setCallerUserID] = useState("");
  const [calleeUserID, setCalleeUserID] = useState("");

  const init = async () => {
    const { userSig } = GenerateTestUserSig.genTestUserSig({
      userID: callerUserID,
      SDKAppID,
      SecretKey: SDKSecretKey,
    });
    await TUICallKitServer.init({
      userID: callerUserID,
      userSig,
      SDKAppID,
    });
    alert("TUICallKit init succeed");
  };

  const call = async () => {
    await TUICallKitServer.call({
      userID: calleeUserID,
      type: TUICallType.VIDEO_CALL,
    });
  };

  const voicecall = async () => {
    try {
      const enable = true;
      await TUICallKitServer.enableFloatWindow(enable);
    } catch (error) {
      console.error(
        `[TUICallKit] Failed to call the enableFloatWindow API. Reason: ${error}`
      );
    }

    const enable = true;
    TUICallKitServer.enableVirtualBackground(enable);

    await TUICallKitServer.call({
      userID: calleeUserID,
      type: TUICallType.AUDIO_CALL,
    });
  };

  const fun1 = async () => {
    init();
    voicecall();
  };
  const fun2 = async () => {
    init();
    call();
  };

  const handleEmoji = (e) => {
    console.log(e);
    setText((prev) => prev + e.emoji);
  };

  const handleImg = (e) => {
    if (e.target.files[0]) {
      setImg({
        file: e.target.files[0],
        url: URL.createObjectURL(e.target.files[0]),
      });
    }
  };

  const handleSend = async () => {
    if (text === "") return;

    let imgUrl = null;

    try {
      if (img.file) {
        imgUrl = await upload(img.file);
      }
      await updateDoc(doc(db, "chats", chatId), {
        message: arrayUnion({
          senderId: currentUser.id,
          text,
          createdAt: new Date(),
          ...(imgUrl && { img: imgUrl }),
        }),
      });

      const userIDs = [currentUser.id, user.id];
      userIDs.forEach(async (id) => {
        const userChatsRef = doc(db, "userchats", id);
        const userChatsSnapshot = await getDoc(userChatsRef);

        if (userChatsSnapshot.exists()) {
          const userChatsData = userChatsSnapshot.data();

          const chatIndex = userChatsData.chats.findIndex(
            (c) => c.chatId === chatId
          );

          userChatsData.chats[chatIndex].lastMessage = text;
          userChatsData.chats[chatIndex].isSeen =
            id === currentUser.id ? true : false;
          userChatsData.chats[chatIndex].updatedAt = Date.now();

          await updateDoc(userChatsRef, {
            chats: userChatsData.chats,
          });
        }
      });
    } catch (error) {
      console.log(error);
    }

    setImg({
      file: null,
      url: "",
    });
    setText("");
  };

  return (
    <div className="chat">
      <div className="top">
        <div className="user">
          <img src={user?.avatar || "./avatar.png"} alt="" />
          <div className="texts">
            <span>{user?.username}</span>
            <p>{user?.status}</p>
          </div>
        </div>
        <div className="icons">
          <img onClick={fun1} src="./phone.png" alt="" />
          <img onClick={fun2} src="video.png" alt="" />
          <img src="./info.png" alt="" />
        </div>
      </div>
      <div className="center">
        {chat?.message?.map((message) => {
          if (message.createdAt) {
            // Convert Firestore timestamp to milliseconds
            const messageTime =
              message.createdAt instanceof Timestamp
                ? message.createdAt.toMillis()
                : message.createdAt?.toDate().getTime();

            // Only show if message is after cleared time
            if (!clearedAt || messageTime > clearedAt) {
              return (
                <div
                  className={
                    message.senderId === currentUser?.id
                      ? "message own"
                      : "message"
                  }
                  key={messageTime}
                >
                  <div className="texts">
                    {message.img && <img src={message.img} alt="" />}
                    <p>{message.text}</p>
                  </div>
                </div>
              );
            }
          }
          return null;
        })}
        {img.url && (
          <div className="message own">
            <div className="texts">
              <img src={img.url} alt="" />
            </div>
          </div>
        )}
        <div ref={endRef}></div>
      </div>
      {isCurrentUserBlocked && (
        <div className="block-message">You have been blocked by this user</div>
      )}
      <div className="bottom">
        <div className="icons">
          <label htmlFor="file">
            <img src="./img.png" alt="" />
          </label>
          <input
            type="file"
            id="file"
            style={{ display: "none" }}
            onChange={handleImg}
            disabled={isCurrentUserBlocked}
          />
          <img src="./camera.png" alt="" />
          <img src="./mic.png" alt="" />
        </div>
        <input
          type="text"
          value={text}
          placeholder="Type your message..."
          onChange={(e) => setText(e.target.value)}
          disabled={isCurrentUserBlocked}
        />
        <div className="emoji">
          <img
            src="./emoji.png"
            alt=""
            onClick={() => setopen((prev) => !prev)}
            style={{ opacity: isCurrentUserBlocked ? 0.5 : 1 }}
          />
          <div className="picker">
            <EmojiPicker
              open={open && !isCurrentUserBlocked}
              onEmojiClick={handleEmoji}
            />
          </div>
        </div>
        <button
          className="sendButton"
          onClick={handleSend}
          disabled={isCurrentUserBlocked}
        >
          send
        </button>
      </div>
      <div className="call">
        <TUICallKit />
      </div>
    </div>
  );
};

export default Chat;

================
File: src/components/details/detail.css
================
.detail {
    flex: 2;
    padding: 20px;
    overflow: auto;
}

.detail::-webkit-scrollbar {
    width: 8px;
}

.detail::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.detail::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 4px;
}

.detail .user {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    margin-bottom: 20px;
}

.detail .user img {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    object-fit: cover;
}

.detail .user h2 {
    margin: 0;
}

.detail .user p {
    margin: 0;
    color: #666;
    font-weight: 300;
}

.detail .info {
    margin-top: 30px;
}

.detail .info .option {
    margin-bottom: 20px;
}

.detail .info .option .title {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px;
    background-color: black;
    cursor: pointer;
    border-radius: 5px;
}

.detail .info .option .title span {
    font-weight: 500;
}

.detail .info .option .title img {
    width: 20px;
    height: 20px;
}

.detail .info .option .photos {
    padding: 10px;
}

.detail .info .option .photos .photoitem {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 10px;
    margin: 10px 0;
}

.detail .info .option .photos .photoitem .photoDetails {
    display: flex;
    align-items: center;
    gap: 10px;
}

.detail .info .option .photos .photoitem .photoDetails img {
    width: 50px;
    height: 50px;
    object-fit: cover;
}

.detail .info .option .photos .photoitem .icon {
    width: 20px;
    height: 20px;
    cursor: pointer;
}

/* Chat Settings Dropdown Styles */
.detail .info .option .settings-dropdown {
    background-color: white;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
    margin: 5px 0;
}

.detail .info .option .setting-item {
    padding: 12px 15px;
    cursor: pointer;
    transition: background-color 0.3s;
    border-bottom: 1px solid #e0e0e0;
}

.detail .info .option .setting-item:last-child {
    border-bottom: none;
}

.detail .info .option .setting-item:hover {
    background-color: #f5f5f5;
}

.detail .info .option .setting-item.disabled {
    opacity: 0.7;
    cursor: not-allowed;
    background-color: #f5f5f5;
}

.detail .info .option .setting-item .setting-text {
    color: #333;
    font-size: 14px;
}

/* Block user text color */
.detail .info .option .setting-item:first-child .setting-text {
    color: #ff3b30;
}

/* Clear chat text color */
.detail .info .option .setting-item:last-child .setting-text {
    color: #007aff;
}

/* Logout Button */
.detail .info .logout {
    width: 100%;
    padding: 10px;
    border: none;
    background-color: #007aff;
    color: white;
    font-weight: 500;
    cursor: pointer;
    border-radius: 5px;
    margin-top: 20px;
    transition: opacity 0.3s;
}

.detail .info .logout:hover {
    opacity: 0.8;
}

/* Modal Styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    width: 90%;
    max-width: 400px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.modal h3 {
    margin: 0 0 15px 0;
    color: #333;
    font-size: 18px;
}

.modal p {
    margin: 0 0 20px 0;
    color: #666;
    font-size: 14px;
}

.modal-buttons {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.modal-buttons button {
    padding: 12px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 500;
    transition: opacity 0.3s;
    font-size: 14px;
}

.modal-buttons button:not(.cancel) {
    background-color: #007aff;
    color: white;
}

.modal-buttons button.cancel {
    background-color: #e0e0e0;
    color: #333;
}

.modal-buttons button:hover {
    opacity: 0.8;
}

================
File: src/components/details/Detail.jsx
================
import React, { useState } from 'react'
import './detail.css'
import { auth, db } from '../../lib/firebase'
import { useChatStore } from '../../lib/chatStore'
import { useUserStore } from '../../lib/userStore'
import { arrayRemove, arrayUnion, updateDoc, doc, getDoc } from 'firebase/firestore';

const Detail = () => {
  const { chatId, user, isCurrentUserBlocked, isReceiverBlocked, changeBlock } = useChatStore();
  const { currentUser } = useUserStore();
  const [openSettings, setOpenSettings] = useState(false);
  const [showClearChatDialog, setShowClearChatDialog] = useState(false);

  const handleBlock = async () => {
    if (!user) return null;

    const userDocRef = doc(db, "users", currentUser.id);
    try {
      await updateDoc(userDocRef, {
        blocked: isReceiverBlocked ? arrayRemove(user.id) : arrayUnion(user.id),
      })
      changeBlock()
      setOpenSettings(false);
    } catch (error) {
      console.log(error);
    }
  }

  const handleClearChat = async () => {
    try {
      // Clear chat for both users
      await updateDoc(doc(db, 'chats', chatId), {
        message: []
      });
      
      // Update both users' lastMessage
      const userIDs = [currentUser.id, user.id];
      userIDs.forEach(async (id) => {
        const userChatsRef = doc(db, "userchats", id);
        const userChatsSnapshot = await getDoc(userChatsRef);
        
        if (userChatsSnapshot.exists()) {
          const userChatsData = userChatsSnapshot.data();
          const chatIndex = userChatsData.chats.findIndex(
            (c) => c.chatId === chatId
          );
          
          if (chatIndex !== -1) {
            userChatsData.chats[chatIndex].lastMessage = "";
            await updateDoc(userChatsRef, {
              chats: userChatsData.chats,
            });
          }
        }
      });

      setShowClearChatDialog(false);
      setOpenSettings(false);
    } catch (error) {
      console.log(error);
    }
  }

  return (
    <div className="detail">
      <div className="user">
        <img src={user?.avatar || "./avatar.png"} alt="" />
        <h2>{user?.username}</h2>
        <p>{user?.status}</p>
      </div>
      <div className="info">
        <div className="option">
          <div className="title" onClick={() => setOpenSettings(!openSettings)}>
            <span>Chat Settings</span>
            <img src={openSettings ? "./arrowDown.png" : "./arrowUp.png"} alt="" />
          </div>
          {openSettings && (
            <div className="settings-dropdown">
              <div 
                className={`setting-item ${isCurrentUserBlocked ? 'disabled' : ''}`}
                onClick={!isCurrentUserBlocked ? handleBlock : undefined}
              >
                <span className="setting-text">
                  {isCurrentUserBlocked ? 
                    "You are blocked" : 
                    isReceiverBlocked ? 
                    "Unblock User" : 
                    "Block User"
                  }
                </span>
              </div>
              <div 
                className="setting-item"
                onClick={() => setShowClearChatDialog(true)}
              >
                <span className="setting-text">Clear Chat</span>
              </div>
            </div>
          )}
        </div>
        <div className="option">
          <div className="title">
            <span>Privacy & help</span>
            <img src="./arrowUp.png" alt="" />
          </div>
        </div>
        <div className="option">
          <div className="title">
            <span>Shared Photos</span>
            <img src="./arrowDown.png" alt="" />
          </div>
          <div className="photos">
            <div className="photoitem">
              <div className="photoDetails">
                <img src="https://plus.unsplash.com/premium_photo-1676637000058-96549206fe71?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" alt="" />
                <span>photo_2024_04.png</span>
              </div>
              <img src="./download.png" alt="" className='icon' />
            </div>
          </div>
        </div>
        <div className="option">
          <div className="title">
            <span>Shared Files</span>
            <img src="./arrowUp.png" alt="" />
          </div>
        </div>
        <button className='logout' onClick={() => auth.signOut()}>Logout</button>
      </div>

      {showClearChatDialog && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>Clear Chat</h3>
            <p>Are you sure you want to clear all messages?</p>
            <div className="modal-buttons">
              <button onClick={handleClearChat}>
                Clear Chat
              </button>
              <button 
                className="cancel"
                onClick={() => setShowClearChatDialog(false)}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default Detail

================
File: src/components/list/chatList/addUser/addUser.css
================
.addUser{
    width: max-content;
    height: max-content;
    padding: 30px;
    background-color: rgba(17,25,40,0.6);
    border-radius:10px;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    margin: auto;
    
    form{
        display: flex;
        gap:20px;

        input{
            padding: 20px;
            border-radius: 10px;
            border: none;
            outline: none;
        }
        button{
            padding: 20px;
            border-radius: 10px;
            background-color: #1a73e8;
            color: white;
            border: none;
            cursor: pointer;
        }

    }
    .user{
        margin-top: 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;

        .detail{
            display: flex;
            align-items: center;
            gap:20px;

            img{
                width: 50px;
                height: 50px;
                border-radius: 50%;
                object-fit: cover;
            }
        }
        button{
            padding: 10px;
            border-radius: 10px;
            background-color: #1a73e8;
            color: white;
            border: none;
            cursor: pointer;
        }
    }

}

================
File: src/components/list/chatList/addUser/AddUser.jsx
================
import React, { useState } from 'react'
import './addUser.css'
import {db} from '../../../../lib/firebase'
import {arrayUnion, collection,doc,getDocs,query,serverTimestamp,setDoc,where,updateDoc,} from 'firebase/firestore';
import {useUserStore} from '../../../../lib/userStore';

const AddUser=()=> {
  
  const [user,setuser]=useState(null);
  const {currentUser}=useUserStore();

  const handleSearch=async(e)=>{
     e.preventDefault();
     const formData=new FormData(e.target );
     const username=formData.get("username");

     try {
      const userRef=collection(db,"users");
      const q=query(userRef,where("username","==",username));

      const querySnapShot=await getDocs(q);
      if(!querySnapShot.empty){
        setuser(querySnapShot.docs[0].data());
      }


     } catch (error) {
        console.log("error in adding user");
        console.log(error);
     }
  }
  const handleAdd=async(e)=>{
    const chatRef = collection(db,"chats");
    const userChatsRef=collection(db,"userchats");


    try {
      const newChatRef=doc(chatRef);

      await setDoc(newChatRef,{
        createdAt:serverTimestamp(),
        messages:[],
      })

      await updateDoc(doc(userChatsRef,user.id),{
        chats:arrayUnion({
          chatId:newChatRef.id,
          lastMessage:"",
          receiverId:currentUser.id,
          updatedAt:Date.now(),
        }),
      });

      await updateDoc(doc(userChatsRef,currentUser.id),{
        chats:arrayUnion({
          chatId:newChatRef.id,
          lastMessage:"",
          receiverId:user.id,
          updatedAt:Date.now(),
        }),
      });

    } catch (error) {
      console.log(error);
    }
  }
  return (
    <div className='addUser'>
        <form onSubmit={handleSearch}>
            <input type="text" placeholder='username' name='username' />
            <button>Search</button>
        </form>
        {user && <div className="user">
            <div className="detail">
                <img src={user.avatar || "./avatar.png"} alt="" />
                <span>{user.username}</span>
            </div>
            <button onClick={handleAdd}>Add User</button>
        </div>}
    </div>
  )
}

export default AddUser

================
File: src/components/list/chatList/chatList.css
================
.chatList{
    flex:1;
    overflow:scroll;
    .search{
        display:flex;
        align-items: center;
        gap:20px;
        padding:20px;

        .searchBar{
            flex:1;
            background-color: rgba(17,25,40,0.5);
            display:flex;
            align-items: center;
            gap:20px;
            border-radius: 5px;
        }
        input{
            background-color: transparent;
            border:none;
            outline:none;
            color:white;
            flex:1;
        }
        img{
            width:20px;
            height:20px;
        }
        .add{
            width:36px;
            height:36px;
            background-color:rgba(17,25,40,0.5) ;
            padding:10px;
            border-radius: 10px;
            cursor:pointer;
        }
    }
    .item{
        display: flex;
        align-items: center;
        gap:20px;
        padding: 20px;
        cursor:pointer;
        border-bottom: 1px solid rgb(150, 178, 229);

        img{
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit:cover;

        }

        .text{
            display:flex;
            flex-direction: column;
            gap:10px;

            span{
                font-weight: 500;
            }
            p{
                font-size: 14px;
                font-weight: 300;
            }
        }

    }
}

================
File: src/components/list/chatList/ChatList.jsx
================
import React, { useEffect, useState } from 'react'
import './chatList.css'
import AddUser from './addUser/AddUser';
import {useUserStore} from '../../../lib/userStore';
import { doc,onSnapshot,getDoc,updateDoc} from 'firebase/firestore';
import { db } from '../../../lib/firebase';
import { useChatStore } from '../../../lib/chatStore';


const ChatList=()=> {
  const [addmode,setAddMode]=useState(false);
  const [chats,setchats]=useState([]);
  const {currentUser}=useUserStore();
  const {changeChat}=useChatStore();

  const [input,setInput]=useState("");

  useEffect(()=>{
    const unsub=onSnapshot(doc(db,'userchats',currentUser.id),async (res)=>{
      const items=res.data().chats;

      const promises=items.map(async(item)=>{
        const userDocRef=doc(db,"users",item.receiverId);
        const userDocSnap=await getDoc(userDocRef);

        const user=userDocSnap.data();
        return {...item,user};
      })

      const chatData=await Promise.all(promises);

      setchats(chatData.sort((a,b)=>b.updatedAt-a.updatedAt));
    });
    return ()=>{
      unsub();
    }
  },[currentUser.id]);

  const handleSelect=async(chat)=>{
      const userChats = chats.map((item)=>{
        const {user,...rest}=item;
        return rest;
      });

      const chatIndex=userChats.findIndex(item=>item.chatId===chat.chatId);
      userChats[chatIndex].isSeen=true;

      const userChatsRef=doc(db,"userchats",currentUser.id);

      try {
        await updateDoc(userChatsRef,{
          chats:userChats,
        });

        changeChat(chat.chatId,chat.user);

      } catch (error) {
        console.log(error);
      }

       
  }

  const filteredChats=chats.filter((c)=>
  c.user.username.toLowerCase().includes(input.toLowerCase())
);

  return (

    <div className='chatList'>
      <div className="search">
        <div className="searchBar">
          <img src="./search.png" alt="" />
          <input type="text" placeholder='Search'  onChange={(e)=>setInput(e.target.value)}/>
        </div>
        <img src={addmode ? './minus.png' : "./plus.png"} alt="" className='add' onClick={()=>setAddMode((prev)=>!prev)}/>
      </div>
      {filteredChats.map(chat=>(
         <div className="item" key={chat.chatId} 
         onClick={()=>handleSelect(chat)}
         style={{backgroundColor: chat?.isSeen ? 'transparent' : '#5183fe'}}
          >
         <img src={chat.user?.avatar || "./avatar.png"} alt="" />
         <div className="text">
           <span>{chat.user.username}</span>
           <p>{chat.lastMessage}</p>
         </div>
       </div>
      ))}
      
      
      {addmode && <AddUser/>}
    </div>
    
  )
}

export default ChatList

================
File: src/components/list/list.css
================
.list{
    flex:1;
    display:flex;
    flex-direction: column;
}

================
File: src/components/list/List.jsx
================
import React from 'react'
import './list.css'
import UserInfo from './userInfo/UserInfo'
import ChatList from './chatList/ChatList'
import { useUserStore } from '../../lib/userStore'

const List = () => {
  const { currentUser } = useUserStore();
  
  console.log("List component rendering with user:", currentUser);
  
  return (
    <div className='list'>
      <UserInfo/>
      <ChatList/>
    </div>
  )
}

export default List

================
File: src/components/list/userInfo/userInfo.css
================
.userInfo{
    padding:20px;
    display:flex;
    align-items: center;
    justify-content: space-between;

    .user{
        display: flex;
        align-items: center;
        gap:20px;

        img{
            width:50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
        }
    }
    .icons{
        display:flex;
        gap:20px;

        img{
            width: 20px;
            height: 20px;
            cursor: pointer;
        }
    }
}

================
File: src/components/list/userInfo/UserInfo.jsx
================
import React from 'react'
import './userInfo.css'
import {useUserStore} from '../../../lib/userStore';

const UserInfo=()=> {

  const {currentUser}=useUserStore();
  
  return (
    <div className='userInfo'>
      <div className="user">
        <img src={currentUser.avatar || "./avatar.png"} alt="" />
        <h2>{currentUser.username}</h2>
      </div>
      <div className="icons">
        <img src="./more.png" alt="" />
        <img src="./video.png" alt="" />
        <img src="./edit.png" alt="" />
      </div>
    </div>
  )
}

export default UserInfo

================
File: src/components/login/login.css
================
.login{
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    gap:100px;

    .item{
        flex:1;
        display:flex;
        flex-direction: column;
        align-items: center;
        gap:20px;

        form{
            display:flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 20px;

            input{
                padding:20px;
                border:none;
                outline:none;
                background-color: rgba(17,25,40,0.6); 
                color: white;
                border-radius: 5px;
            }
            label{
                width: 100%;
                display: flex;
                align-items: center;
                justify-content: space-between;
                cursor: pointer;
                text-decoration: underline;

                img{
                    width:50px;
                    height: 50px;
                    border-radius: 10px;
                    object-fit: cover;
                    opacity:0.6;
                }
            }
            button{
                width: 100%;
                padding: 20px;
                border:none;
                background-color: rgb(82, 95, 234);
                color:rgb(255, 255, 255);
                border-radius: 5px;
                cursor:pointer;
                font-weight: 500;

                &:disabled{
                    cursor: not-allowed;
                    background-color: rgba(82, 95, 234, 0.633);
                }
            }
        }
    }

    .separator{
        height: 80%;
        width: 2px;
        background-color: #dddddd35;
    }
}

================
File: src/components/login/Login.jsx
================
import React, { useState } from 'react'
import './login.css'
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { createUserWithEmailAndPassword,signInWithEmailAndPassword } from 'firebase/auth';
import { auth ,db } from '../../lib/firebase';
import {doc,setDoc,getDoc} from "firebase/firestore";
import upload from '../../lib/upload';

const Login=()=> {

  const [avatar,setAvatar]=useState({
    file:null,
    url:""
  })
  const [loading,setloading]=useState(false);

  const handleAvatar=(e)=>{
    if(e.target.files[0]){
    setAvatar({
      file:e.target.files[0],
      url:URL.createObjectURL(e.target.files[0])
    })
    }
  }

  const handleLogin = async (e) => {
    e.preventDefault();
    setloading(true);
  
    const formData = new FormData(e.target);
    const {email, password} = Object.fromEntries(formData);
    
    try {
      console.log("Starting login process");
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      console.log("User authenticated:", userCredential.user.uid);
      
      // Check user document
      const userDocRef = doc(db, "users", userCredential.user.uid);
      const userDocSnap = await getDoc(userDocRef);
      console.log("User document exists?", userDocSnap.exists());
      
      if (!userDocSnap.exists()) {
        console.log("Creating new user document");
        // Create user document
        await setDoc(userDocRef, {
          username: email.split('@')[0],
          email: email,
          id: userCredential.user.uid,
          status: "Available",
          blocked: [],
          avatar: null
        });
  
        // Create userchats document
        await setDoc(doc(db, "userchats", userCredential.user.uid), {
          chats: []
        });
        
        console.log("User documents created successfully");
      }
      
      // Fetch the user document again to confirm
      const updatedDoc = await getDoc(userDocRef);
      console.log("Updated user document:", updatedDoc.data());
      
      toast.success("Logged in successfully");
    } catch (error) {
      console.error("Login error:", error);
      toast.error(error.message);
    } finally {
      setloading(false);
    }
  }

  const handleRegister=async(e)=>{
    e.preventDefault();
    setloading(true);
    const formData=new FormData(e.target);
    const {username,email,password,status}=Object.fromEntries(formData);
    
    try {
      const res = await createUserWithEmailAndPassword(auth,email,password)
      const imgUrl = await upload(avatar.file)

      await setDoc (doc(db,"users",res.user.uid),{
        username,
        email,
        status, 
        avatar:imgUrl,
        id: res.user.uid,
        blocked:[],
      });

      await setDoc (doc(db,"userchats",res.user.uid),{
        chats:[]
      });
      toast.success("Account created successfully");
    } catch (err) {
      console.log(err)
      toast.error(err.message)
    }finally{
      setloading(false);
    }
  }
  return (
    <div className='login'>
      <div className="item">
        <h2>Welcome back,</h2>
        <form onSubmit={handleLogin}>
          <input type="text" placeholder='Email' name='email' />
          <input type="Password" placeholder='Password' name='password' />
          <button disabled={loading}>{loading ? "loading" : "Sign In"}</button>
        </form>
      </div>
      <div className="separator"></div>
      <div className="item">
      <h2>Create an account</h2>
        <form onSubmit={handleRegister}>
          <label htmlFor="file">
            <img src={avatar.url || "./avatar.png "} alt="" />
            Upload an image
          </label>
          <input type="file" id='file' style={{display:'none'}} onChange={handleAvatar} />
          <input type="text" placeholder='Username' name='username' />
          <input type="text" placeholder='Email' name='email' />
          <input type="Password" placeholder='Password' name='password' />
          <input type="text" placeholder='Status' name='status' />
          <button disabled={loading}>{loading ? "loading" :"Create Account"}</button>
        </form>
      </div>
    </div>
  )
}

export default Login

================
File: src/components/notification/Notification.jsx
================
import React from 'react'
import { ToastContainer } from 'react-toastify'
import "react-toastify/dist/ReactToastify.css"

const Notification=() =>{
  return (
    <div>
        <ToastContainer position='bottom-right'/>
    </div>
  )
}



================
File: src/index.css
================
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande",
    "Lucida Sans Unicode", Geneva, Verdana, sans-serif;
}
body{
  background-image: url('/Users/prashantjakhad/Downloads/react-firebase-chat-starter/public/bg.jpg');
  display:flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  color:white;
}
.container{
  width:80vw;
  height:90vh;
  background-color: rgba(24, 24, 65, 0.674);
  backdrop-filter: blur(19px) saturate(180%);
  border:1px solid rgba(255,255,255,0.125);
  border-radius: 12px;
  display:flex;
}
.loading{
  padding: 50px;
  font-style: 36px;
  border-radius: 10px;
  background-color: rgba(17,25,40,0.9);
}

================
File: src/lib/chatStore.js
================
import { doc, getDoc } from 'firebase/firestore';
import { create } from 'zustand'
import { db } from './firebase';
import { useUserStore } from './userStore'

export const useChatStore = create((set) => ({
  chatId: null,
  user:null,
  isCurrentUserBlocked:false,
  isReceiverBlocked:false,
  
  changeChat: (chatId,user)=>{
    const currentUser=useUserStore.getState().currentUser;

    // If current user is blocked by the other user
    if(user.blocked.includes(currentUser.id)){
      return set({
        chatId,
        user,  // Changed from null to user so we can still see info
        isCurrentUserBlocked:true,
        isReceiverBlocked:false,
      });
    }
    
    // If current user has blocked the other user
    else if(currentUser.blocked.includes(user.id)){
      return set({
        chatId,
        user,  // Changed from null to user
        isCurrentUserBlocked:false,
        isReceiverBlocked:true,
      });
    }
    else {
      return set({
        chatId,
        user,
        isCurrentUserBlocked:false,
        isReceiverBlocked:false,
      });
    }
  },

  changeBlock:()=>{
    set(state=>({...state,isReceiverBlocked: !state.isReceiverBlocked}))
  },

}))

================
File: src/lib/firebase.js
================
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";

const firebaseConfig = {
  apiKey: import.meta.env.VITE_API_KEY,
  authDomain: import.meta.env.VITE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_APP_ID
};

// Add this to verify configuration
console.log("Firebase Config loaded:", {
  authDomain: firebaseConfig.authDomain,
  projectId: firebaseConfig.projectId,
  // Don't log the API key
});

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);
export const storage = getStorage(app);

// Verify initialization
console.log("Firebase initialized successfully");

================
File: src/lib/upload.js
================
import {storage} from './firebase';
import { getDownloadURL,ref,uploadBytesResumable } from 'firebase/storage';


const upload =async (file)=>{

    const metadata = {
        contentType: 'image/jpeg'
      };
      
      const date=new Date()

      const storageRef = ref(storage, `images/${date}+file.name`);
      const uploadTask = uploadBytesResumable(storageRef, file, metadata);
      
      return new Promise((resolve, reject)=>{
      uploadTask.on('state_changed',
        (snapshot) => {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          console.log('Upload is ' + progress + '% done');
          switch (snapshot.state) {
            case 'paused':
              console.log('Upload is paused');
              break;
            case 'running':
              console.log('Upload is running');
              break;
          }
        }, 
        (error) => {

            reject("Something went wrong"+error.code);
          switch (error.code) {
            case 'storage/unauthorized':
              break;
            case 'storage/canceled':
              break;
      
      
            case 'storage/unknown':
              break;
          }
        }, 
        () => {
          getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
            resolve(downloadURL)
            console.log('File available at', downloadURL);
          });
        }
      );
      });
}

export default upload;

================
File: src/lib/userStore.js
================
import { doc, getDoc } from 'firebase/firestore';
import { create } from 'zustand'
import { db } from './firebase';

export const useUserStore = create((set) => ({
  currentUser: null,
  isLoading: true,
  fetchUserInfo: async (uid) => {
    console.log("fetchUserInfo started with uid:", uid);
    if (!uid) {
      console.log("No UID, setting currentUser to null");
      return set({ currentUser: null, isLoading: false });
    }
    try {
      const docRef = doc(db, "users", uid);
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        const userData = docSnap.data();
        console.log("Setting currentUser with data:", userData);
        set({ currentUser: userData, isLoading: false });
      } else {
        console.log("No user document found");
        set({ currentUser: null, isLoading: false });
      }
    } catch (error) {
      console.error("Error fetching user info:", error);
      set({ currentUser: null, isLoading: false });
    }
  }
}));

================
File: src/main.jsx
================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
